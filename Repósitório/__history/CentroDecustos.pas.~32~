unit CentroDecustos;

interface

uses Conexao,Contascontabeis,System.SysUtils,Vcl.Dialogs,Classes,uni;

type TCentroDecusto = class(TContascontabeis)

private
var
Conect:TConexao;
Qry:TUniQuery;
public

procedure Salvar(const Conta: TContascontabeis);override;
procedure Excluir(Id:Integer);override;
procedure Editar(Const Conta:TcontasContabeis;Id:integer);override;
function Listar:TUniQuery;override;
function ListarPorId(Id:Integer):TUniQuery;override;
function ValidarDados(Const contas:Tcontascontabeis):Boolean;override;
end;



implementation

{ TCentroDecusto }


procedure TCentroDecusto.Editar(const Conta: TcontasContabeis; Id: integer);
begin
  if ValidarDados(Conta)then
  begin
  inherited;
  Qry.SQL.Clear;
  Qry.SQL.Add('UPDATE CENTRO_DE_CUSTO SET DT_ALT=:PDT,CCUS=:PCCUS WHERE ID=:PID');
  Qry.Params.ParamByName('PDT').AsDate:= Now();
  Qry.Params.ParamByName('PID').AsInteger:= Id;
  Qry.Params.ParamByName('PNOME').AsString:= Conta.Nome_Cta;
  try
    Qry.ExecSQL;
    ShowMessage('Salvo com sucesso!');
  except
    on Erro: Exception do
    ShowMessage('Erro: '+Erro.Message);
  end;
end;
end;

procedure TCentroDecusto.Excluir(Id: Integer);
begin
  inherited;
  Qry.SQL.Clear;
  Qry.SQL.Add('DELETE FROM CENTROP_DE_CUSTO WHERE ID=:PID');
  Qry.Params.ParamByName('PID').AsInteger:= Id;
  try
    Qry.ExecSQL;
    ShowMessage('Salvo com sucesso!');
  except
    on Erro: Exception do
    ShowMessage('Erro: '+Erro.Message);
  end;
end;



function TCentroDecusto.Listar: TUniQuery;
begin
  Qry.SQL.Clear;
  Qry.SQL.Add('SELECT * FROM CENTRO_DE_CUSTO');
  try
    Qry.Open;
    Result:= Qry;
  except
    on Erro: Exception do
    ShowMessage('Erro: '+Erro.Message);
  end;

end;

function TCentroDecusto.ListarPorId(Id: Integer): TUniQuery;
begin
  Qry.SQL.Clear;
  Qry.SQL.Add('SELECT * FROM CENTRO_DE_CUSTO WHERE ID=:PID');
  Qry.Params.ParamByName('PID').AsInteger:= Id;
  try
    Qry.Open;
    Result:= Qry;
  except
    on Erro: Exception do
    ShowMessage('Erro: '+Erro.Message);
  end;

end;

procedure TCentroDecusto.Salvar(const Conta: TContascontabeis);
begin
  inherited;
  if ValidarDados(Conta) then
  begin
  Qry.SQL.Clear;
  Qry.SQL.Add('INSERT INTO CENTRO_DE_CUSTO(DT_ALT,CCUS)VALUES(:PDT,:PNOME)');
  Qry.Params.ParamByName('PDT').AsDate:= Now();
  Qry.Params.ParamByName('PNOME').AsString:= Conta.Nome_Cta;
  try
    Qry.ExecSQL;
    ShowMessage('Salvo com sucesso!');
  except
    on Erro: Exception do
    ShowMessage('Erro: '+Erro.Message);
  end;
end;
end;


function TCentroDecusto.ValidarDados(const contas: Tcontascontabeis): Boolean;
begin
  if contas.Nome_Cta = '' then
    begin
      raise Exception.Create('Preencha o nome');
      Exit;
    end;

   Result:= True;
end;

end.
